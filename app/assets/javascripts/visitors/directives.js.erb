'use strict';

/* Directives */

//add drggable directive to myapp
myapp.directive('draggable', function () {
  return function (scope, element) {
    // this gives us the native JS object
    var el = element[0];

    el.draggable = true;

    el.addEventListener(
        'dragstart',
        function (e) {
          e.dataTransfer.effectAllowed = 'move';
          e.dataTransfer.setData('Text', this.id);
          this.classList.add('drag');
          return false;
        },
        false
    );

    el.addEventListener(
        'dragend',
        function (e) {
          this.classList.remove('drag');
          return false;
        },
        false
    );
  }
});

var INTEGER_REGEXP = /^\-?\d+((\.|\,)\d+)?$/;
myapp.directive('integer', function () {
  return {
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      ctrl.$parsers.unshift(function (viewValue) {
        if (INTEGER_REGEXP.test(viewValue)) {
          // it is valid
          ctrl.$setValidity('integer', true);
          return viewValue;
        } else {
          // it is invalid, return undefined (no model update)
          ctrl.$setValidity('integer', false);
          return undefined;
        }
      });
    }
  };
});


myapp.directive('droppable', function () {
  return {
    link: function (scope, element) {
      // again we need the native object
      var el = element[0];
      el.scope = scope//this is for using scope inside event listeners
      el.addEventListener(
          'dragover',
          function (e) {
            e.dataTransfer.dropEffect = 'move';
            // allows us to drop
            if (e.preventDefault) e.preventDefault();
            this.classList.add('over');
            return false;
          },
          false
      );
      el.addEventListener(
          'dragenter',
          function (e) {
            this.classList.add('over');
            return false;
          },
          false
      );

      el.addEventListener(
          'dragleave',
          function (e) {
            this.classList.remove('over');
            return false;
          },
          false
      );

      el.addEventListener(
          'drop',
          function (e) {
            // Stops some browsers from redirecting.
            if (e.stopPropagation) e.stopPropagation();
            this.classList.remove('over');
            return false;
          },
          false
      );

    }
  }
});



myapp.directive('notdroppable', function () {
  return {
    link: function (scope, element) {
      // again we need the native object
      var el = element[0];
      el.scope = scope//this is for using scope inside event listeners
      el.removeEventListener(
          'dragover',
          function (e) {
            return false;
          },
          false
      );
      el.removeEventListener(
          'dragenter',
          function (e) {
            return false;
          },
          false
      );

      el.removeEventListener(
          'dragleave',
          function (e) {
            return false;
          },
          false
      );

      el.removeEventListener(
          'drop',
          function (e) {
            return false;
          },
          false
      );

    }
  }
});




myapp.directive('notdraggable', function () {
  return function (scope, element) {
    // this gives us the native JS object
    var el = element[0];

    el.draggable = false;

    el.removeEventListener(
        'dragstart',
        function (e) {
          return false;
        },
        false
    );

    el.removeEventListener(
        'dragend',
        function (e) {
          return false;
        },
        false
    );
  }
});

myapp.directive('cutledder', function () {
  return function (scope, element) {
    // this gives us the native JS object
    var el = element[0];
    var a = 0;
  }
});

var FLOAT_REGEXP = /^\-?\d+((\.|\,)\d+)?$/;
myapp.directive('smartFloat', function () {
  return {
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      ctrl.$parsers.unshift(function (viewValue) {
        if (FLOAT_REGEXP.test(viewValue)) {
          ctrl.$setValidity('float', true);
          return parseFloat(viewValue.replace(',', '.'));
        } else {
          ctrl.$setValidity('float', false);
          return undefined;
        }
      });
    }
  };
});

myapp.directive('indicator', function ($compile) {
  return function (scope, element) {
    // this gives us the native JS object
    var indicator = scope.get_indicator_locally(scope.project.current_indicator);
    if (indicator) {
      indicator = indicator.value;
    }
    var path = null;
    if (indicator != null) {
      switch (indicator) {
        case 0:
          path = '<%= asset_path("indicators/breakdown/plant_red.png") %>';
          break;
        case 1:
          path = '<%= asset_path("indicators/breakdown/plant_yellow.png") %>';
          break;
        case 2:
          path = '<%= asset_path("indicators/breakdown/plant_yellow.png") %>';
          break;
        case 3:
          path = '<%= asset_path("indicators/breakdown/plant_green.png") %>';
          break;
        case 4:
          path = '<%= asset_path("indicators/breakdown/plant_green.png") %>';
          break;
        default :
          path = '<%= asset_path("indicators/breakdown/plant_green.png") %>';
          break;
      }

    }
    if (path) {
      var html = '<img src=' + path + '>';
      var el = angular.element(html);
      var compiled = $compile(el);
      element.append(el);
      compiled(scope);
    }
  }
});



