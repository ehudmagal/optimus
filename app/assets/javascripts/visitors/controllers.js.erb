var myapp = angular.module('myapp', ['ngCookies']);


myapp.controller('projectsCtrl', function ($scope, $http, $cookies, GetElementByIdFactory, GetElementByNameFactory, $filter, GetElementByAttributeFactory, $cookieStore, GetCookieFactory, GetObjectByUrlSynchFactory, GetTxtObjectByUrlSynchFactory, GetManyToOneArrayFactory) {
      //pagination
      var DAY = 60 * 60 * 1000 * 24;
      $scope.metric_units = $cookieStore.get("metric_units");
      $scope.role = GetCookieFactory.getCookie('role');
      $scope.itemsPerPage = 8;
      var DatasetTypeMap = {
        IRRIGATION_DS_TYPE_ID: 277,
        INDICATOR_DS_TYPE_ID: 276,
        DAILY_ETO_DS_VIRTUAL_TYPE_ID: 208,
        DAILY_ETO_DS_TYPE_ID: 203,
        ACCUMULATED_ETO_DS_TYPE_ID: 278,
        AVERAGE_MDS_DS_TYPE_ID: 279,
        PROJECT_MDS: 313,
        DAILY_RAIN: 345
      }
      $scope.projects_curent_page = {
        cur_page: 0
      };


      $scope.prevPage = function (curentPage) {
        if (curentPage.cur_page > 0) {
          curentPage.cur_page--;
          $scope.scroll_top();
        }
      };

      $scope.prevPageDisabled = function (curentPage) {
        return curentPage.cur_page === 0 ? "disabled" : "";
      };

      $scope.pageCount = function (arr) {
        try {
          return Math.ceil(arr.length / $scope.itemsPerPage) - 1;
        } catch (e) {
        }
      };

      $scope.nextPage = function (currentPage, arr) {
        if (currentPage.cur_page < $scope.pageCount(arr)) {
          currentPage.cur_page++;
          $scope.scroll_top();
        }
      };

      $scope.nextPageDisabled = function (currentPage, arr) {
        return currentPage.cur_page === $scope.pageCount(arr) ? "disabled" : "";
      };

      $scope.scroll_top = function () {
        $("projectsList").scrollTop(0);
        var projectsList = document.getElementById("projectsList");
        projectsList.scrollTop = 0;
      }
      $scope.load_data = function () {

        var showmap = true;
        $scope.projects = [];
        var url = '/projects.json';
        $http.get(url).success(function (data) {
          $scope.projects = data;
          if ($scope.activeAdminable()) {
            $scope.meteo_stations = GetObjectByUrlSynchFactory.getObjectByUrlSynch('/meteo_stations.json');
          }
          var project_id = $scope.getQueryVariable('project_id');
          $scope.finished_loading = true;
          if (showmap && $scope.isNumber(project_id)) {
            var project = GetElementByIdFactory.getElementById(project_id, $scope.projects);
            $scope.showMap(project);
          } else {
            if (showmap) {
              $scope.showMap();
            }
          }

        });
      }
      $scope.isNumber = function (obj) {
        return !isNaN(parseFloat(obj))
      }
      $scope.show_meteo_stations = function () {
        $scope.show_meteo = !$scope.show_meteo;
        if ($scope.meteo_markers) {
          for (var i = 0; i < $scope.meteo_markers.length; i++) {
            var marker = $scope.meteo_markers[i];
            marker.setVisible($scope.show_meteo);
          }
        }
      }

      $scope.show_project_markers = function () {
        for (var i = 0; i < $scope.project_markers.length; i++) {
          var marker = $scope.project_markers[i];
          marker.setVisible($scope.show_project_markers_flag);
        }

      }

      $scope.showProjectsOnMap = function (_project) {
        var bounds = new google.maps.LatLngBounds();
        $scope.project_markers = [];
        if ($scope.meteo_stations) {
          $scope.meteo_markers = [];
          for (var i = 0; i < $scope.meteo_stations.length; i++) {
            var station = $scope.meteo_stations[i];
            var myLatlng = new google.maps.LatLng(station.latitude, station.longitude);
            var marker = new google.maps.Marker({
              position: myLatlng,
              map: $scope.map,
              title: station.name,
              icon: '<%= asset_path("Map-Marker-blue.gif") %>'
            });
            marker.setVisible($scope.show_meteo);
            google.maps.event.addListener(marker, 'click', function () {
              var station = $scope.getProjectByTitle($scope.meteo_stations, this.title);
              if (!station.datasets) {
                var url = '/remote_loggers/rl_by_coords.json?latitude=' + station.latitude + '&longitude=' + station.longitude;
                var rl = GetObjectByUrlSynchFactory.getObjectByUrlSynch(url);
                station.datasets = rl.datasets
              }
              var infowindow = new google.maps.InfoWindow({
                content: $scope.getHTMLMeteo(station)
              });
              infowindow.open($scope.map, this);
            });
            $scope.meteo_markers.push(marker);
          }

        }
        for (var i = 0; i < $scope.projects.length; i++) {
          var project = $scope.projects[i];
          var deActivationDate = new Date(project.deactivation_date);
          var now = new Date();
          if (deActivationDate > now && (project.latitude != 0 || project.longitude != 0)) {
            var indicators = project.indicators;
            var icon_path = $scope.getIconForProjectOnMap(project);
            var myLatlng = new google.maps.LatLng(project.latitude, project.longitude);
            var marker = new google.maps.Marker({
              position: myLatlng,
              map: $scope.map,
              title: project.name,
              icon: icon_path
            });
            marker.project = project;
            bounds.extend(myLatlng);
            if ($scope.role != 'investor') {
              google.maps.event.addListener(marker, 'click', function () {
                var project = this.project;
                if (project) {
                  $scope.gotoProject(project);
                }
              });
            }
            marker.setVisible($scope.show_project_markers_flag);
            $scope.project_markers.push(marker);
          }
        }
        $scope.draw_polygons_on_map($scope.map, $scope.projects);
        $scope.map.fitBounds(bounds);
        //set min zoom to 2

        var listener = google.maps.event.addListener($scope.map, "idle", function () {
          var zoomLevel = $scope.map.getZoom();
          if (zoomLevel < 2) {
            $scope.map.setZoom(2);
          }
          if (_project) {
            var latLon = new google.maps.LatLng(_project.latitude, _project.longitude);
            $scope.map.setCenter(latLon);
            $scope.map.setZoom(16);
          }

          google.maps.event.removeListener(listener);

        });
      }


      $scope.showMap = function (_project) {
        $("#table_button").attr('class', 'table_button_passive');
        $("#list_button").attr('class', 'list_button_passive');
        $("#map_button").attr('class', 'map_button_active');
        if (!$scope.showButtonByRole()) {
          $("#table_button").hide();
          $("#list_button").hide();
          $("#map_button").hide();
        }
        $("<div id='map-canvas' style='height: 100%; margin: 0; padding: 0 ;'></div>").appendTo("body");
        $scope.showListView = false;
        $scope.showTableView = false;
        $scope.showMapView = true;
        $scope.mapOptions = {
          mapTypeId: google.maps.MapTypeId.SATELLITE,
          center: new google.maps.LatLng(0, 0),
          zoom: 0
        };
        $scope.map = new google.maps.Map(document.getElementById('map-canvas'), $scope.mapOptions);
        $scope.showProjectsOnMap(_project);
      }

      $scope.show_list = function () {
        $("#table_button").attr('class', 'table_button_passive');
        $("#list_button").attr('class', 'list_button_active');
        $("#map_button").attr('class', 'map_button_passive');
        $scope.showListView = true;
        $scope.showTableView = false;
        $scope.showMapView = false;
        $("#map-canvas").remove();
      }
      $scope.show_table = function (num_of_days) {
        $scope.num_of_table_days = num_of_days;
        $("#list_button").attr('class', 'list_button_passive');
        $("#map_button").attr('class', 'map_button_passive');
        $("#table_button").attr('class', 'table_button_active');
        $scope.showListView = false;
        $scope.showMapView = false;
        $scope.showTableView = true;
        $("#map-canvas").remove();
        if (!$scope.projects_table) {
          var end = (new Date()).getTime();
          var begin = end - DAY * 60;
          var type_ids = [];
          for (var key in DatasetTypeMap) {
            type_ids.push(DatasetTypeMap[key]);
          }
          $scope.finished_loading = false;
          var url = '/projects/data.json';
          var query = {
            ds_type_ids: type_ids,
            begin_epoch: begin,
            end_epoch: end
          };
          var parsed_obj = JSON.stringify(query);
          $.ajax({
            url: url,
            async: true,
            dataType: 'json',
            type: 'GET',
            data: {query: parsed_obj},
            success: function (result) {
              $scope.finished_loading = true;
              $scope.projects_table = result;
              $scope.is_jewish();
            }
          });
        } else {
          $scope.handle_table_datasets($scope.projects_table, num_of_days);
        }
      }
      $scope.handle_table_datasets = function (projects, num_of_days) {
        for (var i = 0; i < projects.length; i++) {
          var proj = projects[i];
          $scope.sort_datasets(proj);
          proj.ds_table = $scope.get_ds_table(proj, num_of_days);
        }
        $scope.set_html_table_body(projects);
      }

      $scope.get_eto_project = function (project) {
        var res = jQuery.extend(true, {}, project);
        var ds_table = jQuery.extend(true, {}, project.ds_table);
        var virtual_eto_rows = GetManyToOneArrayFactory.getManyToOneArray(DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID, 'type_id', ds_table.ds_rows);
        var eto_rows = GetManyToOneArrayFactory.getManyToOneArray(DatasetTypeMap.DAILY_ETO_DS_TYPE_ID, 'type_id', ds_table.ds_rows);
        var rain_rows = GetManyToOneArrayFactory.getManyToOneArray(DatasetTypeMap.DAILY_RAIN, 'type_id', ds_table.ds_rows);
        if (virtual_eto_rows.length > 0) {
          res.ds_table.ds_rows = virtual_eto_rows;
        } else {
          if (eto_rows.length > 0) {
            res.ds_table.ds_rows = eto_rows;
          } else {
            res.ds_table.ds_rows = [$scope.get_fake_eto_ds(ds_table)];
          }
        }
        if (rain_rows) {
          for (var i = 0; i < rain_rows.length; i++) {
            var rain_row = rain_rows[i];
            res.ds_table.ds_rows.push(rain_row);
          }
        }
        res.id = null;
        res.name = 'ETO';
        var ds = res.ds_table.ds_rows[0];
        ds.eto_project = true;
        return res;
      }
      $scope.get_fake_eto_ds = function (ds_table) {
        var res = {
          id: null,
          type_id: DatasetTypeMap.DAILY_ETO_DS_TYPE_ID,
          title: "Daily Evapotranspiration",
          values: []
        }
        for (var i = 0; i < ds_table.dates_row.length; i++) {
          res.values.push(0);
        }
        return res;
      }

      $scope.get_html_table_header = function (projects) {
        var res = [];
        if (projects && projects.length) {
          var proj = projects[0];
          var dates_row = {data: ['', '']};
          for (var i = 0; i < proj.ds_table.dates_row.length; i++) {
            var date = proj.ds_table.dates_row[i];
            dates_row.data.push(date);
          }
          res.push(dates_row);
          var eto_project = $scope.get_eto_project(proj);
          var eto_row = GetElementByAttributeFactory.getElementByAttribute('ETO', 'title', eto_project.ds_table.ds_rows);
          var rain_row = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.DAILY_RAIN, 'type_id', eto_project.ds_table.ds_rows);
          if (eto_row) {
            var eto_row_for_table = {data: ['', 'ETO']};
            for (var i = 0; i < eto_row.values.length; i++) {
              eto_row_for_table.data.push(eto_row.values[i]);
            }
            res.push(eto_row_for_table);
          }
          if (rain_row) {
            var rain_row_for_table = {data: ['', 'Rain']};
            for (var i = 0; i < rain_row.values.length; i++) {
              rain_row_for_table.data.push(rain_row.values[i]);
            }
            res.push(rain_row_for_table);
          }
        }
        return res;
      }
      $scope.set_html_table_body = function (projects) {
        var cur_project_name = null;
        var table_width = $scope.get_table_width();
        $('#dynamic_table').remove();
        $('#table_div').append('<table border="1px solid black;" style="width:' + table_width + ';table-layout:fixed;" id="dynamic_table"></table>');
        var table = $('#dynamic_table');
        var html_string = '<thead class="table_list_header">';
        var header = $scope.get_html_table_header(projects);
        for (var i = 0; i < header.length; i++) {
          var row = header[i];
          html_string += '<tr>';
          for (var j = 0; j < row.data.length; j++) {
            var cell = row.data[j];
            var cell_width = $scope.getCellWidthHtml('cell');
            var cell_height = $scope.get_cell_height_html('cell');
            if (i == 0) {
              cell_height = $scope.get_cell_height_html('project');
            }
            switch (j) {
              case 0:
                cell_width = $scope.getCellWidthHtml('project');
                break;
              case 1:
                cell_width = $scope.getCellWidthHtml('ds_title');
                break;
              default:
                break;
            }
            var align = 'center';
            if (j == 0 || j == 1) {
              align = 'left';
            }
            html_string += '<td  align="' + align + '" style="height:' + cell_height + 'px;vertical-align:top;"><div style="width:' + cell_width + 'px;height:' +
                cell_height + 'px;">' + $scope.getDateStringForTable(cell) + '</div></td>';
          }
          html_string += '</tr>';
        }
        html_string += '</thead>';
        if (projects && projects.length) {
          var height = $scope.get_table_list_height();
          html_string += '<tbody class="table_list" style="height: ' + height + 'px;">';
          for (var i = 0; i < projects.length; i++) {
            var project = projects[i];
            project.ds_table.ds_rows = $filter('orderBy')(project.ds_table.ds_rows, 'type_id', true);
            for (var j = 0; j < project.ds_table.ds_rows.length; j++) {
              var ds_row = project.ds_table.ds_rows[j];
              if (ds_row.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID ||
                  ds_row.type_id == DatasetTypeMap.INDICATOR_DS_TYPE_ID) {
                html_string += '<tr>';
                if (cur_project_name != project.name) {
                  var indicator = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.INDICATOR_DS_TYPE_ID, 'type_id', project.ds_table.ds_rows);
                  var irrigation = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.IRRIGATION_DS_TYPE_ID, 'type_id', project.ds_table.ds_rows);
                  cur_project_name = project.name;
                  var cell_width = $scope.getCellWidthHtml('project');
                  var cell_height = $scope.get_cell_height_html('project');
                  var name_value = $scope.cut_project_name_html(project.name);
                  if (irrigation && indicator) {
                    html_string += '<td rowspan="2"><div style="width:' + cell_width + 'px;height:'
                        + cell_height + 'px;">' + name_value + '</div></td>';
                  } else {
                    html_string += '<td><div style="width: ' + cell_width + 'px;height:' + cell_height +
                        'px;">' + name_value + '</div></td>';
                  }

                }
                var cell_width = $scope.getCellWidthHtml('ds_title');
                var top_border = '';
                if (ds_row.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID) {
                  top_border = 'border-top-width: 2px;'
                }
                html_string += '<td style="' + top_border + '"><div style="width:' + cell_width + 'px;">' + ds_row.title + '</div></td>';
                for (var k = 0; k < ds_row.values.length; k++) {
                  var value = ds_row.values[k];
                  var cell_value = value;
                  var num = parseFloat(cell_value);
                  if (num.toString() != 'NaN') {
                    num = num.toFixed(2);
                    cell_value = num.toString();
                  }
                  var bg_color = 'transparent';
                  var top_border = '';
                  if (ds_row.type_id == DatasetTypeMap.INDICATOR_DS_TYPE_ID) {
                    cell_value = '';
                    var indicator_value = parseInt(value);
                    switch (indicator_value) {
                      case 0:
                        bg_color = 'red';
                        break;
                      case 1:
                        bg_color = 'yellow';
                        break;
                      case 2:
                        bg_color = 'yellow';
                        break;
                      default:
                        bg_color = 'transparent';
                        break;
                    }
                  }
                  if (ds_row.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID) {
                    top_border = 'border-top-width: 2px;';
                    var irrigation_value = parseFloat(value);
                    if ($scope.is_blue(value, k, project)) {
                      bg_color = '#33CCFF';
                    }
                    if (irrigation_value.toString() == 'NaN') {
                      cell_value = '-'
                    }
                  }
                  var cell_width = $scope.getCellWidthHtml('cell');
                  var cell_height = $scope.get_cell_height_html('cell');
                  var align = 'center';
                  if (k == ds_row.values.length - 1 && $scope.num_of_table_days == 14) {
                    align = 'left'
                  }

                  var td = '<td align="' + align + '" style="background-color:' + bg_color + ';' + top_border + '"> <div style="width:' + cell_width + 'px;background-color:' + bg_color + ';' +
                      'height:' + cell_height + 'px;">' + cell_value + '</div></td>';
                  html_string += td;
                }
                html_string += '</tr>';
              }

            }

          }
          html_string += '</tbody>';
          table.append(html_string);
        }

      }
      $scope.cut_project_name_html = function (name) {
        var width = $scope.getCellWidthHtml('project');
        var font_size = 14;
        var max_length = (width * 2) / 14 - 3;
        var res = name;
        if (max_length < name.length) {
          res = name.substring(0, max_length) + '...';
        }
        return res;
      }
      $scope.get_cell_height_html = function (type) {
        var res = 20;
        switch (type) {
          case 'project':
            res *= 2;
            break;
          case 'ds_title':
            res *= 2;
            break;
          default:
            break;
        }
        return res;
      }
      $scope.get_table_list_height = function () {
        var res = $(window).height() - 300;
        return res;
      }
      $scope.getCellWidthHtml = function (type) {
        var table_width = $scope.get_table_width();
        var cell_width = 80;
        switch (type) {
          case 'project':
            cell_width = 150;
            break;
          case 'ds_title':
            cell_width = 100;
            break
          case 'cell':
            switch ($scope.num_of_table_days) {
              case 7:
                cell_width = Math.floor((table_width - 350) / 9) - 1;
                break;
              case 14:
                cell_width = Math.floor((table_width - 350) / 18);
                break;
              case 10:
                cell_width = Math.floor((table_width - 350) / 14);
                break;
              default:
                break;
            }
          default:
            break;
        }

        return cell_width;
      }
      $scope.get_table_width = function () {
        var table_width = $(window).width();
        return table_width;
      }
      $scope.getCellStyle = function (cell, row, index) {
        var res = '';
        var ds_title = $scope.getDsTitle(row);
        if (ds_title.toLowerCase().indexOf('indicator') > -1) {
          var indicator_value = parseInt(cell);
          switch (indicator_value) {
            case 1:
              res = 'background-color:yellow;';
              break;
            case 2:
              res = 'background-color:yellow;';
              break;
            case 0:
              res = 'background-color:red;';
              break;
            default:
              break;
          }
        }
        if (ds_title.toLowerCase().indexOf('irrigation') > -1) {
          var irrigation_value = parseFloat(cell);
          if (irrigation_value.toString() != 'NaN' && irrigation_value > 0) {
            res = 'background-color:#33CCFF;';
          }
        }
        var table_width = $scope.get_table_width();
        var cell_width = 80;
        if (table_width) {
          switch ($scope.num_of_table_days) {
            case 7:
              cell_width = Math.floor((table_width - 350) / 9) - 2;
              break;
            case 14:
              cell_width = Math.floor((table_width - 350) / 18) - 1;
              break;
            default:
              break;
          }
        }
        if (index == 0) {
          cell_width = 250;
        }
        if (index == 1) {
          cell_width = 100;
        }
        res += 'width:' + cell_width + 'px;'
        return res;
      }
      $scope.getCellValue = function (cell, row) {
        var res = cell;
        var num = parseFloat(cell);
        if (num.toString() != 'NaN') {
          num = num.toFixed(2);
          res = num.toString();
        }
        if (ds_title.toLowerCase().indexOf('indicator') > -1) {
          var num = parseInt(cell);
          if (num.toString() != 'NaN') {
            res = '';
          }
        }
        return res;
      }
      $scope.getDsTitle = function (row) {
        var ds_title = row.data[0];
        if (row.has_project_name) {
          ds_title = row.data[1];
        }
        return ds_title;
      }
      $scope.getRowSpan = function (row, index) {
        var res = 0;
        if (row.has_project_name && index == 0) {
          res = 2;
        }
        return res;
      }
      $scope.group_projects_by_climate_station = function (projects) {
        var res = {};
        if (projects) {
          for (var i = 0; i < projects.length; i++) {
            var proj = projects[i];
            var climate_station_name = proj.climate_station_name;
            if (!res[climate_station_name]) {
              res[climate_station_name] = [proj];
            } else {
              res[climate_station_name].push(proj)
            }
          }
        }
        return res;
      }

      $scope.get_ds_table = function (proj, num_of_days) {
        var ds_table = {};
        $scope.convert_d_sets(proj);
        var dates_row = $scope.get_latests_days(proj, num_of_days);
        ds_table.dates_row = dates_row;
        var ds_rows = $scope.get_ds_rows(proj, ds_table.dates_row);
        ds_table.ds_rows = ds_rows;
        var mds_indicator_row = $scope.generate_mds_indicator_row(ds_table);
        ds_table.ds_rows.push(mds_indicator_row);
        return ds_table;
      }
      $scope.convert_d_sets = function (proj) {
        for (var i = 0; i < proj.d_sets.length; i++) {
          var ds = proj.d_sets[i];
          if (!ds.converted) {
            for (var j = 0; j < ds.measurements.length; j++) {
              var measurement = ds.measurements[j];
              measurement.value = $scope.convertValueByUnitSystem(ds, measurement.value);
            }
            ds.converted = true;
          }
        }
      }
      $scope.get_irrigation_div_eto_sum_row = function (ds_table, proj) {
        var res = {id: null, type_id: null, title: 'Rain+Irr/ETo'};
        var values = [];
        for (var i = 0; i < ds_table.dates_row.length; i++) {
          var date = ds_table.dates_row[i];
          var to_push = null;
          if (date == 'Weekly SUM') {
            var last_day = ds_table.dates_row[i - 1];
            var irrigation = $scope.get_weekly_sum_by_type_id(last_day, proj, DatasetTypeMap.IRRIGATION_DS_TYPE_ID, ds_table.dates_row);
            var eto = $scope.get_weekly_sum_by_type_id(last_day, proj, DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID, ds_table.dates_row);
            if (eto != 0) {
              to_push = (irrigation / eto);
            }
          }
          values.push(to_push);
        }
        res.values = values;
        return res;
      }
      $scope.get_weekly_sum_by_type_id = function (last_day, proj, type_id, dates_row) {
        var sum = 0;
        last_day = new Date(last_day.toDateString());
        var week_ago = new Date(last_day.getTime() - 7 * DAY);
        week_ago = new Date(week_ago.toDateString());
        var is_weekly_range = $scope.is_date_in_range(week_ago, dates_row);
        var raw_ds = GetElementByAttributeFactory.getElementByAttribute(type_id, 'type_id', proj.d_sets);
        if (raw_ds && is_weekly_range) {
          if (raw_ds.measurements.length > 0) {
            var first_measurement = raw_ds.measurements[0];
            var first_date = new Date(first_measurement.local);
            first_date = new Date(first_date.toDateString());
            var index = 0;
            var cur_date = first_date;
            while (cur_date <= last_day && index < raw_ds.measurements.length) {
              var cur_measurement = raw_ds.measurements[index];
              if (cur_measurement) {
                cur_date = new Date(cur_measurement.local);
                cur_date = new Date(cur_date.toDateString());
                if (cur_date <= last_day && cur_date > week_ago) {
                  sum += parseFloat(cur_measurement.value);
                }
              } else {
                break;
              }
              index++;
            }
          }

        }

        return sum;
      }
      $scope.is_date_in_range = function (date, dates_row) {
        var res = false;
        date = new Date(date.toDateString());
        var first_day = null;
        for (var i = 0; i < dates_row.length; i++) {
          var cur_date = dates_row[i];
          if (typeof cur_date.getMonth === 'function') {
            cur_date = new Date(cur_date.toDateString());
            if (!first_day) {
              first_day = cur_date;
            }
            if (cur_date == date) {
              res = true;
              break;
            }
          }
        }
        var four_days_before = new Date(first_day.getTime() - 4 * DAY);
        if (date >= four_days_before) {
          res = true;
        }
        return res;
      }
      $scope.get_ds_rows = function (project, dates_row) {
        /*this function gets project and a row of dates, retruns array of objects where each object holds
         ds_id,ds_type_id,ds_title, array of values. if orig ds has measuremnt in specified day, array has this measurement
         else, array has null*/
        var res = [];
        for (var i = 0; i < project.d_sets.length; i++) {
          var ds = project.d_sets[i];
          var ds_for_table = {id: ds.id, type_id: ds.type_id, title: ds.title};
          var values = [];
          for (var j = 0; j < dates_row.length; j++) {
            var date = dates_row[j];
            var measurement = null;
            if (typeof date.getMonth === 'function') {
              measurement = $scope.get_measurement_by_date(date, ds);
            }
            var to_push = null;
            if (measurement) {
              to_push = measurement.value;
            } else {
              if ((ds.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID || ds.type_id == DatasetTypeMap.DAILY_RAIN ) && date == 'Weekly SUM') {
                //need to calc weekly irrigation sum
                ds_for_table.title = 'Irrigation';
                if (ds.type_id == DatasetTypeMap.DAILY_RAIN) {
                  ds_for_table.title = 'Rain';
                }
                var last_day = dates_row[j - 1];
                var irrigation_sum = $scope.get_weekly_sum_by_type_id(last_day, project, ds.type_id, dates_row);
                to_push = irrigation_sum;
              }
              if (ds.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID && date == 'Rain+Irr/ETo') {
                //need to calc weekly irrigation sum
                var last_day = dates_row[j - 2];
                var irrigation_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.IRRIGATION_DS_TYPE_ID, dates_row);
                var rain_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.DAILY_RAIN, dates_row);
                var rain_plus_irrigation = irrigation_sum + rain_sum;
                var virtual_eto_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID, dates_row);
                var eto_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.DAILY_ETO_DS_TYPE_ID, dates_row);
                if (virtual_eto_sum != 0) {
                  to_push = rain_plus_irrigation / virtual_eto_sum;
                } else {
                  if (eto_sum != 0) {
                    to_push = rain_plus_irrigation / eto_sum;
                  } else {
                    to_push = 0;
                  }
                }
              }
              if (ds.type_id == DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID && date == 'Weekly SUM') {
                //need to calc weekly irrigation sum
                ds_for_table.title = 'ETO'
                var last_day = dates_row[j - 1];
                var eto_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID, dates_row);
                to_push = eto_sum;
              }
              if (ds.type_id == DatasetTypeMap.DAILY_ETO_DS_TYPE_ID && date == 'Weekly SUM') {
                //need to calc weekly irrigation sum
                ds_for_table.title = 'ETO'
                var last_day = dates_row[j - 1];
                var eto_sum = $scope.get_weekly_sum_by_type_id(last_day, project, DatasetTypeMap.DAILY_ETO_DS_TYPE_ID, dates_row);
                to_push = eto_sum;
              }

            }
            values.push(to_push);
          }
          ds_for_table.values = values;
          res.push(ds_for_table);
        }
        var irrigation_ds = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.IRRIGATION_DS_TYPE_ID, 'type_id', res);
        if (!irrigation_ds) {
          irrigation_ds = $scope.generate_fake_ds(dates_row, DatasetTypeMap.IRRIGATION_DS_TYPE_ID, 'Irrigation');
          res.push(irrigation_ds);
        }
        return res;
      }
      $scope.generate_fake_ds = function (dates_row, type_id, title) {
        var ds_for_table = {
          id: $scope.generate_fake_ds_id(),
          type_id: type_id,
          title: title,
          values: []
        };
        for (var i = 0; i < dates_row.length; i++) {
          ds_for_table.values.push(null);
        }
        return ds_for_table;
      }
      $scope.generate_fake_ds_id = function () {
        if (!$scope.max_generated_fake_id) {
          $scope.max_generated_fake_id = 1000000000;
        } else {
          $scope.max_generated_fake_id = $scope.getRandomArbitrary($scope.max_generated_fake_id, $scope.max_generated_fake_id + 100);
        }
        return $scope.max_generated_fake_id
      }
      $scope.getRandomArbitrary = function (min, max) {
        return Math.random() * (max - min) + min;
      }
      $scope.get_measurement_by_date = function (date, ds) {
        var res = null;
        if (ds.measurements) {
          for (var i = 0; i < ds.measurements.length; i++) {
            var measurement = ds.measurements[i];
            var measurement_date = new Date(measurement.local);
            if (measurement_date.toDateString() === date.toDateString()) {
              res = measurement;
              break;
            }
          }
        }
        return res;
      }
      $scope.get_latests_days = function (proj, num_of_days) {
        //this function gets project with daily table ds and returns array of latest 10 days to populate a table
        var res = [];
        if (proj.d_sets) {
          var latest_day = $scope.get_latest_day(proj, num_of_days);
          if (latest_day) {
            latest_day = new Date(latest_day.toDateString());
            var first_day = new Date(latest_day.getTime() - ((num_of_days - 1) * DAY));
            var cur_day = first_day;
            for (var i = 1; i <= num_of_days; i++) {
              res.push(new Date(cur_day));
              cur_day.setDate(cur_day.getDate() + 1);
            }
            var res_with_weekly_sum = [];
            for (var i = 0; i < res.length; i++) {
              var date = res[i];
              res_with_weekly_sum.push(date);
              var week_end = 0;
              if ($scope.jewish) {
                week_end = 6;
              }
              if (date.getDay() == week_end) {
                res_with_weekly_sum.push('Weekly SUM');
                res_with_weekly_sum.push('Rain+Irr/ETo');
              }
            }
            res = res_with_weekly_sum;
          }
        }
        return res;
      }

      $scope.get_latest_day = function (proj, num_of_days) {
        var latest_day = null;
        if (proj.d_sets) {
          for (var i = 0; i < proj.d_sets.length; i++) {
            var ds = proj.d_sets[i];
            if (ds.measurements && ds.measurements.length) {
              var found_latest_day = false;
              for (var j = ds.measurements.length - 1; (j >= 0) && !found_latest_day; j--) {
                var measurement = ds.measurements[j];
                var date = new Date(measurement.local);
                var day = date.getDay();
                switch (num_of_days) {
                  case 10:
                    if (j == ds.measurements.length - 1) {
                      if (!latest_day) {
                        latest_day = date;
                      } else {
                        if (date > latest_day) {
                          latest_day = date;
                        }
                      }
                    }
                    break;
                  default:
                    if (!day) {
                      latest_day = date;
                      found_latest_day = true;
                    }
                    break;
                }

              }
            }
            if (latest_day) {
              break;
            }
          }
        }

        return latest_day;
      }

      $scope.generate_mds_indicator_row = function (ds_table) {
        var res = {id: null, type_id: null, title: 'Plant indicator'};
        var mds_row = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.AVERAGE_MDS_DS_TYPE_ID, 'type_id', ds_table.ds_rows);
        var values = [];
        for (var i = 0; i < ds_table.dates_row.length; i++) {
          var value = null;
          if (mds_row) {
            if (mds_row.values.length >= i) {
              var value = mds_row.values[i];
            }
          }
          values.push(value);
        }
        res.values = values;
        return res;
      }
      $scope.getDsTitleStyle = function (ds, project, format) {
        var res = '';
        var ds_length = $scope.getDsToShowLength(project);
        if (format == 'xls') {
          res = 'ss:StyleID="bottom_border"';
          if (ds.title.toLowerCase() == 'Irrigation'.toLowerCase()) {
            res = 'ss:StyleID="top_border"';
          }
          if (ds_length == 1) {
            res = 'ss:StyleID="top_bottom_border"';
          }
          if (ds.type_id == DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID) {
            res = 'ss:StyleID="top_bottom_border_bold"';
          }
        }
        return res;
      }

      $scope.getProjectTitleStyle = function (ds, project, format) {
        var res = '';
        var ds_length = $scope.getDsToShowLength(project);
        if (format == 'xls') {
          res = 'ss:StyleID="bottom_border_align_left"';
          if (ds.title.toLowerCase() == 'Irrigation'.toLowerCase()) {
            res = 'ss:StyleID="top_border_align_left"';
          }
          if (ds_length == 1) {
            res = 'ss:StyleID="top_bottom_border_align_left"';
          }
          if (ds.type_id == DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID) {
            res = 'ss:StyleID="top_bottom_border_bold"';
          }
        }
        return res;
      }
      $scope.getTableValueStyle = function (project, ds, i_index, j_index, format) {
        var res = '';
        if (project && project.ds_table) {
          var ds_length = $scope.getDsToShowLength(project);
          if (ds.title == 'Plant indicator') {
            var indicator_row = GetElementByAttributeFactory.getElementByAttribute(DatasetTypeMap.INDICATOR_DS_TYPE_ID, 'type_id', project.ds_table.ds_rows);
            if (indicator_row) {
              if (format == 'xls') {
                res = 'ss:StyleID="bottom_border"';
                if (ds_length == 1) {
                  res = 'ss:StyleID="top_bottom_border"';
                }
              }
              if (indicator_row.values.length >= j_index) {
                var indicator_value = parseInt(indicator_row.values[j_index]);
                var color = $scope.getColorBySeverity(indicator_value);
                if (color == 'yellow' || color == 'red') {
                  if (format == 'html') {
                    res = 'background-color: ' + color + ';';
                  }
                  if (format == 'xls') {
                    res = 'ss:StyleID="' + color + '"';
                  }
                }
              }
            }
          } else {
            if (ds.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID) {
              if (format == 'xls') {
                res = 'ss:StyleID="top_border"';
                if (ds_length == 1) {
                  res = 'ss:StyleID="top_bottom_border"';
                }
              }
              var value = ds.values[j_index];
              if (value) {
                if (format == 'html') {
                  res = 'background-color: #33CCFF;';
                }
                if (format == 'xls') {
                  if ($scope.is_blue(value, j_index, project)) {
                    res = 'ss:StyleID="blue"';
                  }
                }
              }
            } else {
              if (ds.title == 'Weekly Irrigation SUM') {
                var value = ds.values[j_index];
                if (value) {
                  if (format == 'html') {
                    res = 'background-color: #33CCFF;';
                  }
                  if (format == 'xls') {
                    res = 'ss:StyleID="blue"';
                  }
                }
              } else {
                if (ds.type_id == DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID) {
                  if (format == 'xls') {
                    res = 'ss:StyleID="top_bottom_border_bold"';
                  }
                }
              }
            }
          }
        }
        return res;
      }
      $scope.getColorBySeverity = function (severity) {
        var res = null;
        switch (parseInt(severity)) {
          case 0:
            res = 'red';
            break;
          case 1:
            res = 'yellow';
            break;
          case 2:
            res = 'yellow';
            break;
          case 3:
            res = 'green';
            break;
          case 4:
            res = 'green';
            break;
          default :
            break;
        }
        return res;

      }
      $scope.getProjectByTitle = function (projects, title) {
        var res = null;
        for (var i = 0; i < projects.length; i++) {
          var project = projects[i];
          if (project.name == title) {
            res = project;
            break;
          }
        }
        return res;
      }
      $scope.showProject = function (project) {
        //move project to be first in projects array so it would be zoomed in
        var index = $scope.projects.indexOf(project);
        $scope.projects.splice(index, 1);
        $scope.projects.unshift(project);
        //show the map
        $scope.showMap($scope.projects, 16);
      }
      $scope.getMapStyle = function () {
        var res = 'display: none;';
        if ($scope.show_map) {
          res = 'height: 100%; margin: 0; padding: 0; position: relative ; z-index: 1500';
        }
        return res;
      }
      $scope.getListStyle = function () {
        var res = 'display: none;';
        if ($scope.showListView) {
          res = 'display: block;';
        }
        return res;
      }
      $scope.getTableStyle = function () {
        var res = 'display: none;';
        if ($scope.showTableView) {
          var height = $(window).height() - 400;
          res = 'display: block;height:' + height + 'px;';
        }
        return res;
      }
      $scope.getProjectNameWidth = function () {
        var total_width = $('#projects_header').width();
        var dateWidth = 90;
        if ($scope.num_of_table_days == 14) {
          dateWidth = 45;
        }
        var num_of_weeky_sums = ($scope.num_of_table_days / 7) * 2
        var width = total_width - (($scope.num_of_table_days + num_of_weeky_sums) * dateWidth);
        var res = width + 'px';
        return res;
      }
      $scope.getDateWidth = function () {
        var res = '90px';
        if ($scope.num_of_table_days == 14) {
          res = '45px';
        }
        return res;
      }

      $scope.getTableHeaderStyle = function () {
        var res = 'display: none;';
        if ($scope.showTableView) {
          var table_width = $scope.get_table_width();
          res = 'display: block;width:' + table_width + 'px;';
        }
        return res;
      }

      $scope.getLoadingStyle = function () {
        var res = 'display: none;';
        if (!$scope.finished_loading) {
          res = 'display: block;';
        }
        return res;
      }
      $scope.gotoProject = function (project) {
        window.location = '/projects/' + project.id + '/breakdown';
      };
      $scope.logout = function () {
        var csrf_token = $cookies['CSRF-TOKEN'];
        $.ajax({
              type: 'DELETE',
              dataType: 'json',
              url: '/users/sign_out.json',
              headers: {'X-CSRF-Token': csrf_token},
              data: "",
              contentType: 'application/json',
              success: function () {
                window.location = '/';

              },
              error: function () {
                alert("Error: Could not log out");
              }
            }
        );
      }
      $scope.getQueryVariable = function (variable) {
        var query = window.location.search.substring(1);
        var vars = query.split('&');
        var res = '';
        for (var i = 0; i < vars.length; i++) {
          var pair = vars[i].split('=');
          if (decodeURIComponent(pair[0]) == variable) {
            res = decodeURIComponent(pair[1]);
          }
        }
        return res;
      }
      $scope.getMessageForArchive = function () {
        var res = "Show All Projects";
        if ($scope.show_archived) {
          res = "Show Active Projects";
        }
        return res;
      }
      $scope.getIconForProjectOnMap = function (project) {
        var indicators = project.current_indicator;
        var res = '<%= asset_path("darkgreen_MarkerO.png") %>';
        var current_indicator = $scope.get_indicator_locally(project.current_indicator);
        if (current_indicator != null) {
          var severity = project.current_indicator.value;
          switch (parseInt(severity)) {
            case 0:
              res = '<%= asset_path("indicators/reduced/project_map_indicator_red.png") %>';
              break;
            case 1:
              res = '<%= asset_path("indicators/reduced/project_map_indicator_yellow.png") %>';
              break;
            case 2:
              res = '<%= asset_path("indicators/reduced/project_map_indicator_yellow.png") %>';
              break;
            case 3:
              res = '<%= asset_path("indicators/reduced/project_map_indicator.png") %>';
              break;
            case 4:
              res = '<%= asset_path("indicators/reduced/project_map_indicator.png") %>';
              break;
            default :
              res = '<%= asset_path("indicators/reduced/project_map_indicator.png") %>';
              break;
          }

        }
        return res;
      }

      $scope.get_indicator_locally = function (indicator) {
        var res = indicator;
        if (indicator) {
          if (Object.keys(indicator).length == 0) {
            res = null;
          } else {
            var now = new Date();
            var last_indicator_time = new Date(indicator.local);
            var delta = now.getTime() - last_indicator_time.getTime();
            if (delta > DAY * 2) {
              res = null;
            }
          }
        }
        return res;
      }

      $scope.getDsWithLongestMeasurements = function (datasets) {
        var res = null;
        if (datasets) {
          if (datasets.length > 0) {
            res = datasets[0];
            for (var i = 1; i < datasets.length; i++) {
              var ds = datasets[i];
              if (ds.measurements) {
                if (!res.measurements) {
                  res = ds;
                } else {
                  if (ds.measurements.length > res.measurements.length) {
                    res = ds;
                  }
                }

              }
            }
          }
        }
        return res;
      }
      $scope.getDateString = function (raw_date) {
        var str = new Date(raw_date).toDateString();
        var arr = str.split(' ');
        arr.pop();
        arr.shift();
        var res = arr.join(' ');
        return res;
      }
      $scope.getRoundedValue = function (ds, value) {
        if (value == null && ds.type_id == DatasetTypeMap.IRRIGATION_DS_TYPE_ID) {
          res = '-';
        } else {
          var res = parseFloat(value).toFixed(2);
          if (res.toString() == "NaN") {
            res = "";
          }
        }
        return res;
      }
      $scope.getDateStringForTable = function (date) {
        var res = date;
        if (date && typeof date.getMonth === 'function') {
          res = $scope.getDateString(date);
        }
        if (res == null) {
          res = '-';
        }
        if (res == 'Rain+Irr/ETo' &&
            ($scope.num_of_table_days === 14 || $scope.num_of_table_days === 10)) {
          res = 'Rain+<br>Irr/ETo'
        }
        var num = parseFloat(date);
        if (num.toString() != 'NaN') {
          num = num.toFixed(2);
          res = num.toString();
        }
        return res;
      }

      $scope.getDateStringForTableXls = function (date) {
        var res = date;
        if (date && typeof date.getMonth === 'function') {
          res = $scope.getDateString(date);
        }
        if (res == null) {
          res = '-';
        }
        return res;
      }

      $scope.sort_datasets = function (project) {
        for (var i = 0; i < project.d_sets.length; i++) {
          var ds = project.d_sets[i];
          for (var j = 0; j < ds.measurements.length; j++) {
            var measurement = ds.measurements[j];
            if (!measurement.ts) {
              measurement.ts = (new Date(measurement.local)).getTime();
            }
          }
          ds.measurements = $filter('orderBy')(ds.measurements, 'ts', false);
        }

      }
      $scope.showDsInTable = function (ds) {
        var res = true;
        switch (ds.type_id) {
          case DatasetTypeMap.ACCUMULATED_ETO_DS_TYPE_ID:
            res = false;
            break;
          case (DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID):
            res = false
            break;
          case (DatasetTypeMap.DAILY_ETO_DS_TYPE_ID):
            res = false
            break;
          case DatasetTypeMap.AVERAGE_MDS_DS_TYPE_ID:
            res = false;
            break;
          case DatasetTypeMap.INDICATOR_DS_TYPE_ID:
            res = false;
            break;
          case DatasetTypeMap.AVERAGE_MDS_DS_TYPE_ID:
            res = false;
            break;
          case DatasetTypeMap.PROJECT_MDS:
            res = false;
            break;
          case DatasetTypeMap.DAILY_RAIN:
            res = false;
            break;
          default :
            break;
        }
        if (ds.eto_project) {
          res = true;
        }

        return res;
      }
      $scope.get_project_name_header_style = function () {
        var projects_table = document.getElementById('projects_table');
        for (var i = 0; i < projects_table.rows.length; i++) {
          var row = projects_table.rows[i];
          for (var j = 0; j < row.cells.length; j++) {
            var cell = row.cells[j];
            var width = cell.offsetWidth;
            res = 'width:' + width + 'px;';
            break;
          }
          break;
        }
        var res = '';
        return res;
      }
      $scope.getTableDateStyle = function (date) {
        var res = 'background-color: #00FF00; color: black !important;';
        if (typeof date.getMonth === 'function') {
          res = ''
        }
        return res;
      }
      $scope.convertValueByUnitSystem = function (ds, value) {
        var result = value;
        if (!$scope.metric_units) {
          switch (ds.type_id) {
            case DatasetTypeMap.IRRIGATION_DS_TYPE_ID:
              result = value * 0.03937007874;
              break;
            case DatasetTypeMap.DAILY_ETO_DS_VIRTUAL_TYPE_ID:
              result = value * 0.03937007874;
              break;
            case DatasetTypeMap.ACCUMULATED_ETO_DS_TYPE_ID:
              result = value * 0.03937007874;
              break;
            default:
              break;
          }
        }
        return result;
      }

      $scope.exportTableToPdf = function () {

        var myWindow = window.open('', '', 'width=2000,height=1500');
        var html = '<head><title>' + 'PlantBeat' + '</title>';
        html += '</head><body>' + document.getElementById('table_div').innerHTML + '</body></head>';
        myWindow.document.write(html);
        myWindow.document.close();
        myWindow.focus();
        myWindow.print();
        myWindow.close()
      }
      $scope.exportTableToXls = function () {
        var xlsString = '<?xml version="1.0"?>\
                <?mso-application progid="Excel.Sheet"?>\
        <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\
        xmlns:o="urn:schemas-microsoft-com:office:office"\
        xmlns:x="urn:schemas-microsoft-com:office:excel"\
        xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\
        xmlns:html="http://www.w3.org/TR/REC-html40">';
        xlsString += $scope.getStylesXls();
        xlsString += '<Worksheet ss:Name="' + FULL_NAME + '"><Table>';
        xlsString += $scope.get_columns_width();
        var header = $scope.get_html_table_header($scope.projects_table);
        for (var i = 0; i < header.length; i++) {
          var row = header[i];
          xlsString += '<Row>';
          for (var j = 0; j < row.data.length; j++) {
            var value = row.data[j];
            xlsString += '<Cell  ss:StyleID="grey">\
                            <Data ss:Type="String">' + $scope.getDateStringForTableXls(value) + '</:Data>\
                    </Cell>';
          }
          xlsString += '</Row>';
        }

        for (var i = 0; i < $scope.projects_table.length; i++) {
          var project = $scope.projects_table[i];
          xlsString += $scope.get_project_datasets_xls(project);
        }
        xlsString += '</Table>';
        xlsString += $scope.getWorkSheetOptions();
        xlsString += '</Worksheet>';
        xlsString += '</Workbook>';

        var blob = new Blob([xlsString], {type: "data:application/vnd.ms-excel;base64"});
        $scope.export_file_name = 'PlantBeat_' + (new Date()).toISOString().slice(0, 10).replace(/-/g, "");
        saveAs(blob, $scope.export_file_name + '.xls');

      }

      $scope.get_project_dates_xls = function (project) {
        var res = ''
        for (var j = 0; j < project.ds_table.dates_row.length; j++) {
          var date = project.ds_table.dates_row[j];
          res += '<Cell ' + $scope.getDateStyleXls(date) + '>\
                            <Data ss:Type="String">' + $scope.getDateStringForTableXls(date) + '</Data>\
                    </Cell>';
        }
        return res;
      }
      $scope.getDateStyleXls = function (date) {
        var res = 'ss:StyleID="grey"';
        if (typeof date.getMonth != 'function') {
          res = 'ss:StyleID="deep_grey"';
        }
        return res;
      }
      $scope.get_project_datasets_xls = function (project) {
        var res = '';
        var table = project.ds_table;
        var first_row_writen = false;
        for (var i = 0; i < table.ds_rows.length; i++) {
          var ds = table.ds_rows[i];
          if ($scope.showDsInTable(ds)) {
            res += '<Row>';
            if (first_row_writen) {
              res += '<Cell>\
                            <Data ss:Type="String"></Data>\
                    </Cell>';
            } else {
              res += '<Cell ' + $scope.getProjectTitleStyle(ds, project, 'xls') + '>\
                            <Data ss:Type="String" >' + project.name + '</Data>\
                    </ss:Cell>';
              first_row_writen = true;
            }

            res += '<Cell ' + $scope.getDsTitleStyle(ds, project, 'xls') + '>\
                            <Data ss:Type="String">' + ds.title + '</Data>\
                    </Cell>';
            for (var j = 0; j < ds.values.length; j++) {
              var value = ds.values[j];
              var cell = '<Cell ' + $scope.getTableValueStyle(project, ds, i, j, 'xls') + '>\
                            <Data ss:Type="' + $scope.getDsValueXls(value) + '" >' + $scope.getRoundedValue(ds, value) + '</Data>\
                    </Cell>';
              res += cell;

            }
            res += '</Row>';
          }
        }

        return res;
      }

      $scope.getDsValueXls = function (value) {
        var res = 'Number';
        if (isNaN(value) || value == null) {
          res = 'String';
        }
        return res;
      }
      $scope.getProjectID = function (project) {
        var res = project.id;
        if (!res) {
          res = '';
        }
        return res;
      }
      $scope.getMergeDown = function (project) {
        var res = '';
        var merge_down = $scope.getDsToShowLength(project);
        if (merge_down > 0) {
          res = 'ss:MergeDown="' + merge_down + '"'
        }
        return res;
      }
      $scope.getWorkSheetOptions = function () {
        var res = '<WorksheetOptions\
        xmlns="urn:schemas-microsoft-com:office:excel">\
                <Selected/>\
                <FreezePanes/>\
                <FrozenNoSplit/>\
        <SplitHorizontal>3</SplitHorizontal>\
        <TopRowBottomPane>1</TopRowBottomPane>\
        <SplitVertical>2</SplitVertical>\
        <LeftColumnRightPane>2</LeftColumnRightPane>\
        </WorksheetOptions>';
        return res;
      }
      $scope.get_columns_width = function () {
        var num_of_columns = $scope.get_num_of_xls_columns();
        var res = '';
        for (var i = 0; i < num_of_columns; i++) {
          var width = 50;
          if (i < 3) {
            width = 100;
          }
          res += '<ss:Column ss:Width="' + width + '"/>';
        }
        return res;
      }
      $scope.get_num_of_xls_columns = function () {
        var proj = $scope.projects_table[0];
        var res = 3 + proj.ds_table.dates_row.length;
        return res;
      }
      $scope.getDsToShowLength = function (project) {
        var res = 0;
        for (var i = 0; i < project.ds_table.ds_rows.length; i++) {
          var ds = project.ds_table.ds_rows[i];
          if ($scope.showDsInTable(ds)) {
            res++;
          }
        }
        return res;
      }

      $scope.getStylesXls = function () {
        var res = '<Styles>\
                <Style ss:ID="Default" ss:Name="Normal">\
                <Alignment ss:Vertical="Bottom"/>\
                <Borders/>\
                <Font ss:FontName="Arial" x:CharSet="177" x:Family="Swiss" ss:Size="11"\
                ss:Color="#000000"/>\
                <Interior/>\
                <NumberFormat/>\
                <Protection/>\
                </Style>\
                    <Style ss:ID="green">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#00FF00" ss:Pattern="Solid"/>\
                        <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                    <Style ss:ID="grey">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#CBD2D4" ss:Pattern="Solid"/>\
                        <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="deep_grey">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#919799" ss:Pattern="Solid"/>\
                        <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="red">\
                      <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#FF0000" ss:Pattern="Solid"/>\
                          <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                    <Style ss:ID="yellow">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#FFFF00" ss:Pattern="Solid"/>\
                          <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="blue">\
                      <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                        <Interior ss:Color="#33CCFF" ss:Pattern="Solid"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="bottom_border">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                    <Style ss:ID="bottom_border_align_left">\
                     <Alignment ss:Horizontal="Left" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                    <Style ss:ID="top_border">\
                    <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="top_border_align_left">\
                    <Alignment ss:Horizontal="Left" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="top_bottom_border">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                     <Style ss:ID="top_bottom_border_bold">\
                     <Alignment ss:Horizontal="Center" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                         <Font ss:FontName="Arial" x:Family="Swiss" ss:Size="11" ss:Color="#000000"\
                          ss:Bold="1"/>\
                    </Style>\
                     <Style ss:ID="top_bottom_border_align_left">\
                     <Alignment ss:Horizontal="Left" ss:Vertical="Bottom"/>\
                          <Borders>\
                           <Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="2"/>\
                           <Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="2"/>\
                        </Borders>\
                    </Style>\
                </Styles>';
        return res;
      }
      $scope.getDsToShow = function (ds_rows) {
        var res = [];
        if (ds_rows && ds_rows.length) {
          for (var i = 0; i < ds_rows.length; i++) {
            var ds = ds_rows[i];
            if ($scope.showDsInTable(ds)) {
              res.push(ds);
            }
          }
        }
        return res;
      }
      $scope.activeAdminable = function () {
        var res = false;
        if ($scope.role) {
          if ($scope.role == 'admin' || $scope.role == 'agronomist' || $scope.role == 'technician') {
            res = true;
          }
        }
        return res;
      }

      $scope.getMeteoText = function () {
        var res = "Show Meteo Stations";
        if ($scope.show_meteo) {
          res = "Hide Meteo Stations";
        }
        return res;
      }
      $scope.getProjectsText = function () {
        var res = "Show Project markers";
        if ($scope.show_project_markers_flag) {
          res = "Hide Project markers";
        }
        return res;
      }
      $scope.searchProjectsOnMap = function () {
        if (!$scope.searchText || $scope.searchText == '') {
          for (var i = 0; i < $scope.project_markers; i++) {
            var marker = $scope.project_markers[i];
            marker.setVisible(true);
          }
          for (var i = 0; i < $scope.polygons.length; i++) {
            var polygon = $scope.polygons[i];
            polygon.setVisible(true);
          }
        } else {
          var projects = $filter('searchAnything')($scope.projects, $scope.searchText, ['name', 'id', 'crop_name']);
          for (var i = 0; i < $scope.project_markers.length; i++) {
            var marker = $scope.project_markers[i];
            var project = GetElementByAttributeFactory.getElementByAttribute(marker.project.id,'id',projects);
            var show = true;
            if (!project) {
              show = false;
            }
            marker.setVisible(show);
          }
          for (var i = 0; i < $scope.polygons.length; i++) {
            var polygon = $scope.polygons[i];
            polygon.setVisible(false);
          }
          for (var i = 0; i < projects.length; i++) {
            var project = projects[i];
            if(project.polygon_on_map){
              project.polygon_on_map.setVisible(true);
            }
          }
        }
      }
      $scope.showButtonByRole = function () {
        var res = true;
        if ($scope.role == 'investor') {
          res = false;
        }
        return res;
      }
      $scope.showOptionByRole = function (option) {
        var res = true;
        switch (option) {
          case 'mobile_site':
            if ($scope.role == 'investor') {
              res = false;
            }
            break;
          case 'mobile_admin':
            if ($scope.role == 'investor') {
              res = false;
            }
            break;
          case 'admin':
            if ($scope.role == 'investor') {
              res = false;
            }
            break;
          default:
            break;
        }
        return res;
      }
      $scope.getHTMLMeteo = function (station) {
        var res = '<p>' + station.name + '</p>';
        res += '<table>';
        for (var i = 0; i < station.datasets.length; i++) {
          var ds = station.datasets[i];
          res += '<tr><td>' + $scope.getClimateTitle(ds.title) + '<br>'
          res += '<ul>'
          for (var j = 0; j < ds.measurements.length; j++) {
            var measurement = ds.measurements[j];
            var local = measurement.local.split(" ")[0];
            res += '<li>' + local + ' ' + measurement.value + '</li>';
          }
          res += '</ul></td></tr>';
        }
        res += '</table>';
        return res;
      }
      $scope.getClimateTitle = function (title) {
        var res = '';
        if (title) {
          var arr = title.split(' ');
          if (arr.length > 2) {
            res = arr[0] + ' ' + arr[1];
          }
        }
        return res;
      }
      $scope.is_circle_project = function (project) {
        var res = false;
        if (project.coordinates && project.coordinates.length) {
          if (project.coordinates[0].radius_meters) {
            res = true;
          }
        }
        return res;
      }
      $scope.draw_polygons_on_map = function (map, projects) {
        $scope.polygons = [];
        var now = new Date();
        for (var i = 0; i < projects.length; i++) {
          var project = projects[i];
          var deactivation_date = new Date(project.deactivation_date);
          if ((project.coordinates) && (project.coordinates.length) &&
              (now < deactivation_date) && (project.status != "archived")) {
            var coords = project.coordinates
            var current_indicator = $scope.get_indicator_locally(project.current_indicator);
            var severity = current_indicator;
            if (current_indicator) {
              severity = current_indicator.value;
            }
            var color = $scope.getColorBySeverity(severity);
            var marker = new MarkerWithLabel({
              position: new google.maps.LatLng(0, 0),
              draggable: false,
              raiseOnDrag: false,
              map: map,
              labelContent: project.name,
              labelAnchor: new google.maps.Point(30, 20),
              labelClass: "polygon_marker_labels", // the CSS class for the label
              labelStyle: {opacity: 1.0},
              icon: '<%= asset_path("polygon_marker.png") %>',
              visible: false
            });
            var polygon = null;
            if(!$scope.is_circle_project(project)) {
              polygon = new google.maps.Polygon({
                paths: coords,
                strokeColor: color,
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: color,
                fillOpacity: 0.35,
                project: project,
                marker: marker
              });
            }else{
              var center =  new google.maps.LatLng( coords[0].lat,  coords[0].lng);
              polygon = new google.maps.Circle({
                strokeColor: color,
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: color,
                fillOpacity: 0.35,
                map: map,
                center: center,
                radius: project.coordinates[0].radius_meters,
                project: project,
                marker: marker
              });
            }
            polygon.setMap($scope.map);

            polygon.addListener('click', function () {
              if (this.project) {
                $scope.gotoProject(this.project);
              }
            });
            polygon.addListener("mouseover", function (event) {
              this.marker.setPosition(event.latLng);
              this.marker.setVisible(true);
            });
            polygon.addListener("mouseout", function (event) {
              this.marker.setVisible(false);
            });
            project.polygon_on_map = polygon;
            $scope.polygons.push(polygon);


          }

        }
      }
      $scope.get_ds_by_type_and_time = function (type_ids, begin, end) {
        var query = {
          ds_type_ids: type_ids,
          begin_epoch: begin,
          end_epoch: end
        };
        var url = '/projects/project_json_data.json?'
        var res = GetDataByJsonFactory.getDataByJson(url, query, 'json');
        return res;
      }
      $(window).resize(function () {
        if ($scope.showTableView == true) {
          $scope.show_table($scope.num_of_table_days);
        }
      });
      $scope.daysSelectorStyle = function (days) {
        var res = '';
        if (days == $scope.num_of_table_days) {
          res = 'color: red;'
        }
        return res;
      }

      $scope.is_blue = function (value, index, project) {
        var res = false;
        var irrigation_value = parseFloat(value);
        var date = project.ds_table.dates_row[index];
        if (typeof date.getMonth === 'function' && irrigation_value) {
          res = true;
        }
        return res;
      }

      $scope.is_jewish = function () {
        var proj = null;
        var latitude = null;
        var longitude = null;
        $scope.jewish = false;
        for (var i = 0; i < $scope.projects.length; i++) {
          var proj = $scope.projects[i];
          latitude = parseFloat(proj.latitude);
          longitude = parseFloat(proj.longitude);
          if (latitude && longitude) {
            break;
          }
        }
        var geocoder = new google.maps.Geocoder();
        var latlng = {lat: latitude, lng: longitude};
        geocoder.geocode({'location': latlng}, function (results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            var addresses = results;
            for (var i = 0; i < addresses.length; i++) {
              var address = addresses[i];
              for (var j = 0; j < address.address_components.length; j++) {
                var address_component = address.address_components[j];
                if (address_component.short_name == 'IL') {
                  $scope.jewish = true;
                  break;
                }
              }
            }
            $scope.projects_table = $filter('orderBy')($scope.projects_table, 'id', false);
            $scope.handle_table_datasets($scope.projects_table, $scope.num_of_table_days);
            try {
              $scope.$apply();
            } catch (e) {

            }
          } else {
            console.log('Geocoder failed due to: ' + status);
          }
        });
      }

      $scope.load_data();
    }
);





